import re
import store
import telebot
import measures
import schedules
from telebot import types
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler

bot = telebot.TeleBot('')
scheduler = BackgroundScheduler()

scheduler_jobs = list(store.read_csv('store/schedules.csv', store.SCHEDULES_FIELDNAMES))
measures_raw = list(store.read_csv('store/measures.csv', store.MEASURES_FIELDNAMES))
headaches_raw = list(store.read_csv('store/headaches.csv', store.HEADACHES_FIELDNAMES))


def send_reminder(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ', callback_data='write_blood_pressure'))
    bot.send_message(chat_id, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–≤–ª–µ–Ω–∏—è', reply_markup=markup)


def add_job(chat_id, day_of_week, hour, minute, job_id=None):
    job_id = job_id if job_id is not None else store.get_next_id(scheduler_jobs, 'job_id')
    scheduler.add_job(send_reminder, 'cron', day_of_week=day_of_week, hour=hour, minute=minute, id=job_id, args=[chat_id])


def get_cancel_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    return markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = f'{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='create_schedule'), types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ', callback_data='write_blood_pressure'))
    markup.add(types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–º–∞–Ω–¥—ã', callback_data='call_help'))
    bot.send_message(message.chat.id, welcome_text, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['help'])
def process_help_command(message):
    help_text = '–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—Ä–æ–≤—è–Ω—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ - @hitinap\n\n–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–µ–π—á–∞—Å –ø–æ–Ω–∏–º–∞—é:\n\n'
    help_text += '\n'.join(f'/{command.command} - {command.description}' for command in bot.get_my_commands())
    bot.send_message(message.chat.id, help_text, parse_mode='html')


@bot.message_handler(commands=['newschedule'])
def create_schedule(message):
    markup = types.InlineKeyboardMarkup()
    for val in schedules.ScheduleFreq:
        markup.add(types.InlineKeyboardButton(text=val.value['ru'], callback_data=val.value['data_id']))

    text = '<b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:'
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['schedule'])
def show_schedules(message):
    user_jobs = store.filter_by_chat_id(scheduler_jobs, message.chat.id)
    text = '–£ –≤–∞—Å –µ—Å—Ç—å {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n{}'.format(len(user_jobs), '\n'.join(schedules.build_schedule_text(job, id_flg=True) for job in user_jobs))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='create_schedule'), types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='delete_schedule'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['deleteschedule'])
def delete_schedule(message):
    markup = types.InlineKeyboardMarkup()
    user_jobs = store.filter_by_chat_id(scheduler_jobs, message.chat.id)
    for job in user_jobs:
        markup.add(types.InlineKeyboardButton(text=schedules.build_schedule_text(job), callback_data='delete_schedule_' + job['job_id']))

    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:', reply_markup=markup)


def send_report_next_step(message):
    if re.compile(r'\d+\.\d+\.\d+-\d+\.\d+\.\d+').match(message.text):
        dates = message.text.split('-')
        date_from = datetime.strptime(dates[0], '%d.%m.%Y').date()
        date_to = datetime.strptime(dates[1], '%d.%m.%Y').date()

        if date_to < date_from:
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.send_message(message.chat.id, '<b>–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.</b>', parse_mode='html')
            send_report(message)
        else:
            user_data = store.filter_by_chat_id(measures_raw, message.chat.id)
            text = measures.build_report_text(user_data, date_from, date_to)
            bot.send_message(message.chat.id, text, parse_mode='html')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        send_report(message)


@bot.message_handler(commands=['report'])
def send_report(message):
    text = '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–∞–≤–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>DD.MM.YYYY-DD.MM.YYYY</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.12.2023-01.01.2024'
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=get_cancel_markup())
    bot.register_next_step_handler(message, send_report_next_step)


def delete_blood_pressure_next_step(message):
    if message.text == '/report':
        bot.delete_message(message.chat.id, message.message_id - 1)
        send_report(message)
    elif re.compile(r'\d+').match(message.text):
        user_data = store.filter_by_chat_id(measures_raw, message.chat.id)
        if int(message.text) in measures.get_measure_ids(user_data):
            store.delete(measures_raw, 'id', message.chat.id, int(message.text))
            store.write_csv('store/measures.csv', measures_raw)
            bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å –¥–∞–≤–ª–µ–Ω–∏—è —Å id={message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        else:
            bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å –¥–∞–≤–ª–µ–Ω–∏—è —Å id={message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        delete_blood_pressure(message)


@bot.message_handler(commands=['deletepressure'])
def delete_blood_pressure(message):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ id –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ id –∑–∞–ø–∏—Å–∏ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /report'
    bot.send_message(message.chat.id, text, reply_markup=get_cancel_markup())
    bot.register_next_step_handler(message, delete_blood_pressure_next_step)


@bot.message_handler(commands=['addpressure'])
def write_blood_pressure(message):
    text = '<b>–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ</b>\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –±–æ—Ç—É. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∞–µ—Ç–µ –∑–∞–º–µ—Ä—ã:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='‚òÄÔ∏è–£—Ç—Ä–æ', callback_data='write_morning_pressure'), types.InlineKeyboardButton(text='üåô–í–µ—á–µ—Ä', callback_data='write_evening_pressure'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


def write_headache_next_step(message, current_datetime=None):
    if current_datetime is None:
        if re.compile(r'\d+\.\d+\.\d+ \d\d:\d\d').match(message.text):
            current_datetime = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
            bot.delete_message(message.chat.id, message.message_id - 1)
        else:
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
            write_headache(message)

    text = '–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—é –±–æ–ª—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10, –≥–¥–µ 1 - –±–æ–ª—å –ø–æ—á—Ç–∏ –Ω–µ –æ—â—É—â–∞–µ—Ç—Å—è, –∞ 10 - –±–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Ä–ø–µ—Ç—å –±–µ–∑ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–≥–æ.'
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup.add(*[types.InlineKeyboardButton(text=str(i), callback_data=f'write_headache_{i}_{current_datetime.strftime("%d.%m.%Y %H:%M")}') for i in range(1, 11)])
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['addheadache'])
def write_headache(message):
    text = '<b>–°–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏</b>\n\n–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—â—É—â–∞–ª–∏ –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>DD.MM.YYYY HH:mm</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä 27.01.2024 21:26'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–µ–π—á–∞—Å', callback_data='write_headache_now'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, write_headache_next_step)


def delete_headache_next_step(message):
    if message.text == '/headachereport':
        bot.delete_message(message.chat.id, message.message_id - 1)
        send_headache_report(message)
    elif re.compile(r'\d+').match(message.text):
        user_data = store.filter_by_chat_id(headaches_raw, message.chat.id)
        headaches_ids = list(map(lambda record: int(record['id']), user_data))
        if int(message.text) in headaches_ids:
            store.delete(headaches_raw, 'id', message.chat.id, int(message.text))
            store.write_csv('store/headaches.csv', headaches_raw)
            bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å –æ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ —Å id={message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        else:
            bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å –æ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ —Å id={message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        delete_headache(message)


@bot.message_handler(commands=['deleteheadache'])
def delete_headache(message):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ id –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ id –∑–∞–ø–∏—Å–∏ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /headachereport'
    bot.send_message(message.chat.id, text, reply_markup=get_cancel_markup())
    bot.register_next_step_handler(message, delete_headache_next_step)


def build_headache_report_text(user_data, date_from, date_to):
    return '–ó–∞–ø–∏—Å–∏ –æ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ –æ—Ç {date_from} –¥–æ {date_to} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ:\n\n{records}'.format(
        date_from=date_from,
        date_to=date_to,
        records='\n\n'.join(
            '(id={id}) –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime}\n–û—Ü–µ–Ω–∫–∞: {score}'.format(
                id=record['id'],
                datetime=record['user_datetime'],
                score=record['score'],
            ) for record in user_data if date_from <= datetime.strptime(record['date'], '%d.%m.%Y').date() <= date_to
        )
    )


def send_headache_report_next_step(message):
    if re.compile(r'\d+\.\d+\.\d+-\d+\.\d+\.\d+').match(message.text):
        dates = message.text.split('-')
        date_from = datetime.strptime(dates[0], '%d.%m.%Y').date()
        date_to = datetime.strptime(dates[1], '%d.%m.%Y').date()

        if date_to < date_from:
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.send_message(message.chat.id, '<b>–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.</b>', parse_mode='html')
            send_headache_report(message)
        else:
            user_data = store.filter_by_chat_id(headaches_raw, message.chat.id)
            text = build_headache_report_text(user_data, date_from, date_to)
            bot.send_message(message.chat.id, text, parse_mode='html')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        send_headache_report(message)


@bot.message_handler(commands=['headachereport'])
def send_headache_report(message):
    text = '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>DD.MM.YYYY-DD.MM.YYYY</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.12.2023-01.01.2024'
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=get_cancel_markup())
    bot.register_next_step_handler(message, send_headache_report_next_step)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def callback_cancel(function_call):
    bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    bot.send_message(function_call.message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    bot.clear_step_handler_by_chat_id(chat_id=function_call.message.chat.id)


def schedule_create_next_step(message, function_call):
    bot.delete_message(message.chat.id, message.message_id - 1)
    if re.compile(r'\d\d:\d\d').match(message.text):
        job_id = store.get_next_id(scheduler_jobs, 'job_id')
        user_data = schedules.transform_raw_user_data(message.chat.id, function_call.data, message.text, job_id)
        scheduler_jobs.append(user_data)
        add_job(user_data['chat_id'], user_data['day_of_week'], int(user_data['hour']), int(user_data['minute']), job_id)
        store.write_csv('store/schedules.csv', scheduler_jobs)

        text = f'–°–ø–∞—Å–∏–±–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ <b>{schedules.build_schedule_text(user_data)}</b>'
        bot.send_message(message.chat.id, text, parse_mode='html')
    else:
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        callback_schedule_create(function_call, next_step=True)


@bot.callback_query_handler(func=lambda call: call.data in ('schedule_daily', 'schedule_weekdays'))
def callback_schedule_create(function_call, next_step=False):
    if not next_step:
        bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç <b>HH:MM</b>'
    bot.send_message(function_call.message.chat.id, text, parse_mode='html', reply_markup=get_cancel_markup())
    bot.register_next_step_handler(function_call.message, schedule_create_next_step, function_call)


@bot.callback_query_handler(func=lambda call: call.data == 'schedule_weekly')
def callback_schedule_create_weekly(function_call):
    bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    markup = types.InlineKeyboardMarkup(row_width=7)
    markup.add(*[types.InlineKeyboardButton(text=val.value['short'], callback_data=val.value['data_id']) for val in schedules.ScheduleWeeklyFreq])
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(function_call.message.chat.id, '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Ö –ø–æ–ª—É—á–∞—Ç—å?', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_weekly_'))
def callback_schedule_create_weekly_day(function_call):
    callback_schedule_create(function_call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_schedule_'))
def callback_delete_schedule(function_call):
    bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    job_id = int(function_call.data[16:])
    store.delete(scheduler_jobs, 'job_id', function_call.message.chat.id, job_id)
    store.write_csv('store/schedules.csv', scheduler_jobs)
    bot.send_message(function_call.message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å id={job_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')


def write_blood_pressure_next_step(message, function_call):
    if re.compile(r'\d+/\d+ \d+').match(message.text):
        idx = store.get_next_id(measures_raw, 'id')
        data_row = measures.add_new_measure(measures_raw, message.chat.id, message.text, function_call.data, idx)
        store.write_csv('store/measures.csv', measures_raw)
        bot.send_message(message.chat.id, measures.get_success_text(data_row), parse_mode='html')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        callback_write_blood_pressure(function_call, next_step=True)


@bot.callback_query_handler(func=lambda call: call.data in ('write_morning_pressure', 'write_evening_pressure'))
def callback_write_blood_pressure(function_call, next_step=False):
    if not next_step:
        bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    text = f'–ó–∞–ø–∏—à–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ {"—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ" if function_call.data == "write_morning_pressure" else "–≤–µ—á–µ—Ä–Ω–µ–≥–æ"} –¥–∞–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–í–µ—Ä—Ö–Ω–µ–µ/–ù–∏–∂–Ω–µ–µ –ü—É–ª—å—Å</b>. –ù–∞–ø—Ä–∏–º–µ—Ä, 140/71 78'
    bot.send_message(function_call.message.chat.id, text, parse_mode='html', reply_markup=get_cancel_markup())
    bot.register_next_step_handler(function_call.message, write_blood_pressure_next_step, function_call)


@bot.callback_query_handler(func=lambda call: call.data == 'write_headache_now')
def callback_write_headache_now(function_call):
    bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    bot.clear_step_handler_by_chat_id(chat_id=function_call.message.chat.id)
    write_headache_next_step(function_call.message, current_datetime=datetime.now())


@bot.callback_query_handler(func=lambda call: call.data.startswith('write_headache_') and call.data != 'write_headache_now')
def callback_write_headache_score(function_call):
    bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
    func_call_data = function_call.data[15:].split('_')
    score = int(func_call_data[0])
    user_dt = func_call_data[1]
    real_dt = datetime.now().strftime('%d.%m.%Y %H:%M')
    idx = store.get_next_id(headaches_raw, 'id')
    headaches_raw.append({'id': idx, 'chat_id': function_call.message.chat.id, 'real_datetime': real_dt, 'user_datetime': user_dt , 'date': user_dt[:10], 'score': score})
    store.write_csv('store/headaches.csv', headaches_raw)
    bot.send_message(function_call.message.chat.id, f'–ó–∞–ø–∏—Å—å —Å id={idx} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')


@bot.callback_query_handler(func=lambda call:True)
def response(function_call):
    if function_call.message:
        if function_call.data == 'call_help':
            process_help_command(function_call.message)
        elif function_call.data == 'create_schedule':
            create_schedule(function_call.message)
        elif function_call.data == 'delete_schedule':
            delete_schedule(function_call.message)
        elif function_call.data == 'write_blood_pressure':
            write_blood_pressure(function_call.message)


@bot.message_handler(content_types='text')
def message_reply(message):
    if re.compile(r'\d+/\d+ \d+').match(message.text):
        text = '–Ø –µ—â–µ –Ω–µ —É–º–µ—é –ø–æ–Ω–∏–º–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥, –Ω–æ –ø–æ—Ö–æ–∂–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–≤–ª–µ–Ω–∏—è, –∑–∞–ø–∏—à–µ–º?'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ', callback_data='write_blood_pressure'))
        bot.send_message(message.chat.id, text, reply_markup=markup)


if __name__ == '__main__':
    for job in scheduler_jobs:
        add_job(int(job['chat_id']), job['day_of_week'], int(job['hour']), int(job['minute']), job['job_id'])

    scheduler.start()
    bot.infinity_polling()
