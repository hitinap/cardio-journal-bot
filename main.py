import re
import csv
import telebot
from telebot import types
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler

bot = telebot.TeleBot('')
scheduler = BackgroundScheduler()


def read_schedules():
    fieldnames = ['job_id', 'chat_id', 'day_of_week', 'hour', 'minute']
    with open('store/schedules.csv', encoding='utf-8') as r_file:
        file_reader = csv.DictReader(r_file, fieldnames=fieldnames, delimiter=',')
        for row in file_reader:
            scheduler.add_job(
                send_reminder,
                'cron', 
                day_of_week=row['day_of_week'],
                hour=int(row['hour']),
                minute=int(row['minute']),
                id=row['job_id'],
                args=[int(row['chat_id'])],
			)
            yield row


def write_schedules():
    with open('store/schedules.csv', mode='w', encoding='utf-8') as w_file:
        file_writer = csv.writer(w_file, delimiter=',')
        for row in job_list:
            file_writer.writerow(row.values())


schedule_weekdays = {
    'schedule_weekly_monday': {'ru': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º', 'num': '0'},
    'schedule_weekly_tuesday': {'ru': '–≤—Ç–æ—Ä–Ω–∏–∫–∞–º', 'num': '1'},
    'schedule_weekly_wednesday': {'ru': '—Å—Ä–µ–¥–∞–º', 'num': '2'},
    'schedule_weekly_thursday': {'ru': '—á–µ—Ç–≤–µ—Ä–≥–∞–º', 'num': '3'},
    'schedule_weekly_friday': {'ru': '–ø—è—Ç–Ω–∏—Ü–∞–º', 'num': '4'},
    'schedule_weekly_saturday': {'ru': '—Å—É–±–±–æ—Ç–∞–º', 'num': '5'},
    'schedule_weekly_sunday': {'ru': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º', 'num': '6'},
}


def create_job(chat_id, schedule_type: str, time: str):
    time = list(map(int, time.split(':')))
    hour, minute = time[0], time[1]

    job_id = 0
    job_ids = list(map(lambda job: int(job['job_id']), job_list))
    if len(job_ids) > 0:
        job_id = str(max(job_ids) + 1)

    if schedule_type == 'schedule_daily':
        day_of_week = '0-6'
    elif schedule_type == 'schedule_weekdays':
        day_of_week = '0-4'
    else:
        day_of_week = schedule_weekdays[schedule_type]['num']

    scheduler.add_job(send_reminder, 'cron', day_of_week=day_of_week, hour=hour, minute=minute, id=job_id, args=[chat_id])
    job_list.append({'job_id': job_id, 'chat_id': chat_id, 'day_of_week': day_of_week, 'hour': hour, 'minute': minute})
    write_schedules()


def get_jobs_list_by_chat_id(chat_id):
    return list(filter(lambda job: int(job['chat_id']) == chat_id, job_list))


def read_measures():
    fieldnames = ['id', 'chat_id', 'date', 'time', 'time_of_day', 'pressure', 'pulse']
    with open('store/measures.csv', encoding='utf-8') as r_file:
        file_reader = csv.DictReader(r_file, fieldnames=fieldnames, delimiter=',')
        for row in file_reader:
            yield row


def write_measures():
    with open('store/measures.csv', mode='w', encoding='utf-8') as w_file:
        file_writer = csv.writer(w_file, delimiter=',')
        for row in measures:
            file_writer.writerow(row.values())


def get_measures_by_chat_id(chat_id):
    return list(filter(lambda ms: int(ms['chat_id']) == chat_id, measures))


def add_measure(chat_id, date, time, time_of_day, pressure, pulse):
    measure_id = 0
    measure_ids = list(map(lambda ms: int(ms['id']), measures))
    if len(measure_ids) > 0:
        measure_id = str(max(measure_ids) + 1)

    measures.append({'id': measure_id, 'chat_id': chat_id, 'date': date, 'time': time, 'time_of_day': time_of_day, 'pressure': pressure, 'pulse': pulse})
    write_measures()
    return measure_id


@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = f'{message.from_user.first_name}, –ø—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='create_schedule'), types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ', callback_data='write_blood_pressure'))
    markup.add(types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–º–∞–Ω–¥—ã', callback_data='call_help'))
    bot.send_message(message.chat.id, welcome_text, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['help'])
def process_help_command(message):
    help_text = '–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫—Ä–æ–≤—è–Ω—ã–º –¥–∞–≤–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ - @hitinap\n\n–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–µ–π—á–∞—Å –ø–æ–Ω–∏–º–∞—é:\n\n'
    help_text += '\n'.join(f'/{command.command} - {command.description}' for command in bot.get_my_commands())
    bot.send_message(message.chat.id, help_text, parse_mode='html')


@bot.message_handler(commands=['newschedule'])
def create_schedule(message):
    text = '<b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:'
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton(text='–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data='schedule_daily'),
        types.InlineKeyboardButton(text='–ü–æ –±—É–¥–Ω—è–º', callback_data='schedule_weekdays'),
        types.InlineKeyboardButton(text='–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', callback_data='schedule_weekly'),
	)
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['schedule'])
def show_schedule_list(message):
    user_jobs = get_jobs_list_by_chat_id(message.chat.id)
    text = f'–£ –≤–∞—Å –µ—Å—Ç—å {len(user_jobs)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n'
    for job in user_jobs:
        sub_text = f'‚Ä¢ (id={job["job_id"]}) '
        if job['day_of_week'] == '0-6':
            sub_text += '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å '
        elif job['day_of_week'] == '0-4':
            sub_text += '–ü–æ –±—É–¥–Ω—è–º '
        else:
            weekday = [info for _, info in schedule_weekdays if info['num'] == job['day_of_week']][0]
            sub_text += f'–ü–æ {weekday["ru"]} '
        sub_text += f'–≤ {job["hour"]}:{job["minute"] if len(job["minute"]) > 1 else "0" + job["minute"]}'
        text += sub_text + '\n'

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='create_schedule'), types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data='delete_schedule'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


def delete_job_from_list(job_id):
    index = None
    for idx, job in enumerate(job_list):
        if int(job['job_id']) == job_id:
            index = idx
            break

    del job_list[index]


def check_schedule_id(message):
    if message.text == '/schedule':
        bot.delete_message(message.chat.id, message.message_id - 1)
        show_schedule_list(message)
    elif re.compile(r'\d+').match(message.text):
        job_ids = list(map(lambda job: int(job['job_id']), job_list))
        if int(message.text) in job_ids:
            delete_job_from_list(int(message.text))
            write_schedules()
            bot.send_message(message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å id={message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
        else:
            bot.send_message(message.chat.id, f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å id={message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        delete_schedule(message)


@bot.message_handler(commands=['deleteschedule'])
def delete_schedule(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ id –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /schedule', reply_markup=markup)
    bot.register_next_step_handler(message, check_schedule_id)


@bot.message_handler(commands=['addpressure'])
def write_blood_pressure(message):
    text = '<b>–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ</b>\n\n<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –±–æ—Ç—É. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ –∑–∞–Ω–æ–≤–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∞–µ—Ç–µ –∑–∞–º–µ—Ä—ã:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='‚òÄÔ∏è–£—Ç—Ä–æ', callback_data='write_morning_pressure'), types.InlineKeyboardButton(text='üåô–í–µ—á–µ—Ä', callback_data='write_evening_pressure'))
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)


def check_report_dates(message):
    if re.compile(r'\d+\.\d+\.\d+-\d+\.\d+\.\d+').match(message.text):
        dates = message.text.split('-')
        date_from = datetime.strptime(dates[0], '%d.%m.%Y').date()
        date_to = datetime.strptime(dates[1], '%d.%m.%Y').date()
        if date_to < date_from:
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.send_message(message.chat.id, '<b>–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π.</b>', parse_mode='html')
            send_report(message)
        else:
            user_measures = get_measures_by_chat_id(message.chat.id)
            text = f'–ó–∞–ø–∏—Å–∏ –¥–∞–≤–ª–µ–Ω–∏—è –æ—Ç {date_from} –¥–æ {date_to} –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ:\n\n'
            for user_ms in user_measures:
                ms_date = datetime.strptime(user_ms['date'], '%Y-%m-%d').date()
                if ms_date >= date_from and ms_date <= date_to:
                    text += f'(id={user_ms["id"]}) –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {user_ms["date"]} {user_ms["time"]}\n'
                    text += '–í—Ä–µ–º—è —Å—É—Ç–æ–∫: {}\n'.format("‚òÄÔ∏è–£—Ç—Ä–æ" if user_ms['time_of_day'] == 'morning' else "üåô–í–µ—á–µ—Ä")
                    text += f'–ê–î: {user_ms["pressure"]} –ø—É–ª—å—Å: {user_ms["pulse"]}\n\n'
            bot.send_message(message.chat.id, text, parse_mode='html')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        send_report(message)


@bot.message_handler(commands=['report'])
def send_report(message):
    text = '–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–∞–≤–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>DD.MM.YYYY-DD.MM.YYYY</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.12.2023-01.01.2024'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, check_report_dates)


def delete_pressure_from_list(measure_id):
    index = None
    for idx, ms in enumerate(measures):
        if int(ms['id']) == measure_id:
            index = idx
            break

    del measures[index]


def check_pressure_id(message):
    if message.text == '/report':
        bot.delete_message(message.chat.id, message.message_id - 1)
        send_report(message)
    elif re.compile(r'\d+').match(message.text):
        measure_ids = list(map(lambda ms: int(ms['id']), measures))
        if int(message.text) in measure_ids:
            delete_pressure_from_list(int(message.text))
            write_measures()
            bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å –¥–∞–≤–ª–µ–Ω–∏—è —Å id={message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        else:
            bot.send_message(message.chat.id, f'–ó–∞–ø–∏—Å—å –¥–∞–≤–ª–µ–Ω–∏—è —Å id={message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        delete_blood_pressure(message)


@bot.message_handler(commands=['deletepressure'])
def delete_blood_pressure(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ id –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ id –∑–∞–ø–∏—Å–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /report', reply_markup=markup)
    bot.register_next_step_handler(message, check_pressure_id)


def send_markup_for_week(message):
    markup = types.InlineKeyboardMarkup(row_width=7)
    markup.add(
        types.InlineKeyboardButton(text='–ü–Ω', callback_data='schedule_weekly_monday'),
        types.InlineKeyboardButton(text='–í—Ç', callback_data='schedule_weekly_tuesday'),
        types.InlineKeyboardButton(text='–°—Ä', callback_data='schedule_weekly_wednesday'),
        types.InlineKeyboardButton(text='–ß—Ç', callback_data='schedule_weekly_thursday'),
        types.InlineKeyboardButton(text='–ü—Ç', callback_data='schedule_weekly_friday'),
        types.InlineKeyboardButton(text='–°–±', callback_data='schedule_weekly_saturday'),
        types.InlineKeyboardButton(text='–í—Å', callback_data='schedule_weekly_sunday'),
	)
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, '–û–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Ö –ø–æ–ª—É—á–∞—Ç—å?', reply_markup=markup)


def check_input_time(message, schedule_type):
    bot.delete_message(message.chat.id, message.message_id - 1)
    if re.compile(r'\d\d:\d\d').match(message.text):
        create_job(message.chat.id, schedule_type, message.text)
        text = '–°–ø–∞—Å–∏–±–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
        if schedule_type == 'schedule_daily':
            text += ' –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
        elif schedule_type == 'schedule_weekdays':
            text += ' –ø–æ –±—É–¥–Ω—è–º'
        else:
            text += f' –ø–æ {schedule_weekdays[schedule_type]["ru"]}'
        text += f' –≤ {message.text}'
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        ask_for_schedule_time(message)


def ask_for_schedule_time(message, schedule_type):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç <b>HH:MM</b>'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, check_input_time, schedule_type)


def send_reminder(chat_id):
    text = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–≤–ª–µ–Ω–∏—è'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ', callback_data='write_blood_pressure'))
    bot.send_message(chat_id, text, parse_mode='html', reply_markup=markup)


def check_input_pressure(message, time_of_day):
    if re.compile(r'\d+/\d+ \d+').match(message.text):
        dt = f'{datetime.now():%Y-%m-%d %H:%M}'.split(' ')
        date, time = dt[0], dt[1]
        pressure = message.text.split(' ')
        ad, pulse = pressure[0], pressure[1]
        measure_id = add_measure(message.chat.id, date, time, time_of_day, ad, pulse)

        text = f'<b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!</b>\n\n(id={measure_id}) –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {date} {time}\n–í—Ä–µ–º—è —Å—É—Ç–æ–∫: {"‚òÄÔ∏è–£—Ç—Ä–æ" if time_of_day == "morning" else "üåô–í–µ—á–µ—Ä"}\n–ê–î: {ad} –ø—É–ª—å—Å: {pulse}'
        bot.send_message(message.chat.id, text, parse_mode='html')
    else:
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>', parse_mode='html')
        ask_pressure_from_user(message, time_of_day)


def ask_pressure_from_user(message, time_of_day):
    text = '–ó–∞–ø–∏—à–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ {} –¥–∞–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–í–µ—Ä—Ö–Ω–µ–µ/–ù–∏–∂–Ω–µ–µ –ü—É–ª—å—Å</b>. –ù–∞–ø—Ä–∏–º–µ—Ä, 140/71 78'.format('—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ' if time_of_day == 'morning' else '–≤–µ—á–µ—Ä–Ω–µ–≥–æ')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(message, check_input_pressure, time_of_day)


@bot.callback_query_handler(func=lambda call:True)
def response(function_call):
    if function_call.message:
        if function_call.data == 'call_help':
            process_help_command(function_call.message)
        elif function_call.data == 'create_schedule':
            create_schedule(function_call.message)
        elif function_call.data == 'delete_schedule':
            delete_schedule(function_call.message)
        elif function_call.data == 'write_blood_pressure':
            write_blood_pressure(function_call.message)
        elif function_call.data == 'cancel':
            bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
            bot.send_message(function_call.message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

		# XXX:
        if function_call.data == 'schedule_daily' or function_call.data == 'schedule_weekdays':
            bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
            ask_for_schedule_time(function_call.message, function_call.data)
        elif function_call.data == 'schedule_weekly':
            send_markup_for_week(function_call.message)
            bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
        elif function_call.data.startswith('schedule_weekly_'):
            bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
            ask_for_schedule_time(function_call.message, function_call.data)

		# XXX:
        if function_call.data == 'write_morning_pressure':
            bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
            ask_pressure_from_user(function_call.message, 'morning')
        elif function_call.data == 'write_evening_pressure':
            bot.delete_message(function_call.message.chat.id, function_call.message.message_id)
            ask_pressure_from_user(function_call.message, 'evening')


job_list = list(read_schedules())
measures = list(read_measures())

scheduler.start()
bot.infinity_polling()
